// Code generated by gnorm, DO NOT EDIT!
{{with .Table}}
package {{toLower .Name}}

import "github.com/sillydong/gnorm/database/drivers/mysql/gnorm"

{{$table := .DBName -}}
{{$schema := .Schema.DBName -}}
// Row represents a row from '{{ $table }}'.
type Row struct {
{{- range .Columns }}
	{{ .Name }} {{ .Type }}  // {{ .DBName }}
{{- end }}
}


// Field values for every column in {{.Name}}.
var (
{{- range .Columns }}
	{{.Name}}Col gnorm.{{ title (replace .Type "." "" 1) }}Field = "{{ .DBName }}"
{{- end -}}
)

// Query retrieves rows from '{{ $table }}' as a slice of Row.
func Query(db gnorm.DB, where gnorm.WhereClause) ([]*Row, error) {
	const origsqlstr = `SELECT 
		{{ join .Columns.DBNames ", " }}
		FROM {{$schema}}.{{ $table }} WHERE (`

	sqlstr := origsqlstr + where.String() + ") "

	var vals []*Row
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}

		err = q.Scan(
			{{- $lastCol := dec (len .Columns)  }}
			{{- range $x, $c :=  .Columns -}}
				&r.{{$c.Name}}{{ if ne $x $lastCol}}, {{end -}}
			{{end -}}
		)			
		if err != nil {
			return nil, err
		}

		vals = append(vals, &r)
	}
	return vals, nil
}

{{end}}
